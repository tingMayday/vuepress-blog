(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{480:function(e,t,a){"use strict";a.r(t);var n=a(1),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("blockquote",[a("p",[e._v("vue的一些特性和原理整理")])]),e._v(" "),a("h2",{attrs:{id:"一、什么是mvvm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、什么是mvvm"}},[e._v("#")]),e._v(" 一、什么是MVVM")]),e._v(" "),a("p",[a("img",{attrs:{src:"/blog/4-1.png",alt:"MVVM",title:"MVVM"}}),e._v("\nMVVM是Model-View-ViewModel的简写。即模型-视图-视图模型。View通过View-Model的DOM Listeners将事件绑定到Model上，而Model则通过Data Bindings来管理View中的数据，View-Model从中起到一个连接桥的作用。")]),e._v(" "),a("p",[e._v("MVVM最早由微软提出来，它借鉴了桌面应用程序的MVC思想，在前端页面中，把Model用纯JavaScript对象表示，View负责显示，两者做到了最大限度的分离。\n把Model和View关联起来的就是ViewModel。ViewModel负责把Model的数据同步到View显示出来，还负责把View的修改同步回Model。")]),e._v(" "),a("ul",[a("li",[e._v("模型：\n模型是指代表真实状态内容的领域模型（面向对象），或指代表内容的数据访问层（以数据为中心）。")]),e._v(" "),a("li",[e._v("视图：\n就像在MVC和MVP模式中一样，视图是用户在屏幕上看到的结构、布局和外观（UI）。")]),e._v(" "),a("li",[e._v("视图模型：\n视图模型是暴露公共属性和命令的视图的抽象。MVVM没有MVC模式的控制器，也没有MVP模式的presenter，有的是一个绑定器。在视图模型中，绑定器在视图和数据绑定器之间进行通信。")]),e._v(" "),a("li",[e._v("绑定器：\n声明性数据和命令绑定隐含在MVVM模式中。在Microsoft解决方案堆中，绑定器是一种名为XAML的标记语言。绑定器使开发人员免于被迫编写样板式逻辑来同步视图模型和视图。在微软的堆之外实现时，声明性数据绑定技术的出现是实现该模式的一个关键因素。")])]),e._v(" "),a("h2",{attrs:{id:"二、vue生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、vue生命周期"}},[e._v("#")]),e._v(" 二、vue生命周期")]),e._v(" "),a("p",[e._v("从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、销毁等一系列过程，称之为 Vue 的生命周期。总共分为8个阶段：创建前/后, 载入前/后,更新前/后,销毁前/销毁后。官方文档的生命周期图示：\n"),a("img",{attrs:{src:"/blog/4-2.png",alt:"vue生命周期",title:"vue生命周期"}})]),a("p",{staticClass:"point"},[e._v("特别值得注意的是created钩子函数和mounted钩子函数的区别")]),a("p"),e._v(" "),a("ul",[a("li",[e._v("beforeCreate（创建前） 在数据观测和初始化事件还未开始")]),e._v(" "),a("li",[e._v("created（创建后） 完成数据观测，属性和方法的运算，初始化事件，$el属性还没有显示出来")]),e._v(" "),a("li",[e._v("beforeMount（载入前） 在挂载开始之前被调用，相关的render函数首次被调用。实例已完成以下的配置：编译模板，把data里面的数据和模板生成html。注意此时还没有挂载html到页面上。")]),e._v(" "),a("li",[e._v("mounted（载入后） 在el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的html内容替换el属性指向的DOM对象。完成模板中的html渲染到html页面中。此过程中进行ajax交互。")]),e._v(" "),a("li",[e._v("beforeUpdate（更新前） 在数据更新之前调用，发生在虚拟DOM重新渲染和打补丁之前。可以在该钩子中进一步地更改状态，不会触发附加的重渲染过程。")]),e._v(" "),a("li",[e._v("updated（更新后） 在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。")]),e._v(" "),a("li",[e._v("beforeDestroy（销毁前） 在实例销毁之前调用。实例仍然完全可用。")]),e._v(" "),a("li",[e._v("destroyed（销毁后） 在实例销毁之后调用。调用后，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。")])]),e._v(" "),a("h2",{attrs:{id:"三、vue的双向数据绑定的原理-object-defineproperty"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、vue的双向数据绑定的原理-object-defineproperty"}},[e._v("#")]),e._v(" 三、vue的双向数据绑定的原理(Object.defineProperty())")]),e._v(" "),a("p",[e._v("Vue是采用数据劫持结合发布/订阅模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。\n"),a("img",{attrs:{src:"/blog/4-3.png",alt:"vue双向绑定",title:"vue双向绑定"}})]),e._v(" "),a("p",[e._v("vue的双向数据绑定整合了整合Observer，Compile和Watcher三者，通过Observer监听数据的变化，通过Compile来编辑解析指令，通过Watcher搭起Observer和Compile的通信桥梁。")]),e._v(" "),a("p",[e._v("1.监听器Observer，用来劫持并监听所有属性，如果属性发生变化的，就通知订阅者。")]),e._v(" "),a("p",[e._v("2.订阅者watcher， 每一个Watcher都绑定一个更新函数，watcher接受属性变化的通知并执行相应的函数。")]),e._v(" "),a("p",[e._v("3.解析器compile，可以扫描和解析每个节点的相关指令（v-model，v-on等指令），如果节点存在v-model，v-on等指令，则解析器Compile初始化这类节点的模板数据，使之可以显示在视图上，然后初始化相应的订阅者（Watcher）。")]),e._v(" "),a("h2",{attrs:{id:"四、v-if和v-show的-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、v-if和v-show的-区别"}},[e._v("#")]),e._v(" 四、v-if和v-show的 区别")]),e._v(" "),a("ul",[a("li",[e._v("v-if 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。")])]),e._v(" "),a("p",[e._v("v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。")]),e._v(" "),a("p",[e._v("相比之下，v-show 就简单得多——不管初始条件是什么，带有 v-show 的元素始终会被渲染并保留在 DOM 中。v-show 只是简单地切换元素的 CSS 属性 display。")]),e._v(" "),a("p",[e._v("一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。")]),e._v(" "),a("h2",{attrs:{id:"五、v-for中key的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、v-for中key的作用"}},[e._v("#")]),e._v(" 五、v-for中key的作用")]),e._v(" "),a("ul",[a("li",[e._v("如果不使用 key，Vue 会使用一种最大限度减少动态元素并且尽可能的尝试就地修改/复用相同类型元素的算法。")]),e._v(" "),a("li",[e._v("使用 key 时，它会基于 key 的变化重新排列元素顺序，并且会移除 key 不存在的元素。\n"),a("p",{staticClass:"point"},[e._v("注意：key的取值必须是number 或 string，不能是对象，而且使用 v-for 循环的每一项的值，都要保证唯一性,重复的 key 会造成渲染错误。")])])]),e._v(" "),a("h2",{attrs:{id:"六、vue组件间的通讯"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、vue组件间的通讯"}},[e._v("#")]),e._v(" 六、vue组件间的通讯")]),e._v(" "),a("ol",[a("li",[e._v("父组件向子组件输送数据\n父组件用props的方式向子组件传递数据，props 可以是数组或对象")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  // 父组件\n  <template>\n  <div>{{childText}}</div>\n  <child :childData=\"childText\" :childArr=\"childArr\" />\n  </template> \n  <script>\n  import Child from \"./components/Child\"\n  export default {\n    data(){\n      return{ \n        childText: '子组件文字',\n        childArr: ['字段1','字段2','字段3',]\n      }\n    },\n    components:{ Child }\n  }\n  <\/script>\n\n")])])]),a("p",[e._v("这是父组件，childData是父组件想要传递给子组件的值,通过:childText(v-bind:childText),:childArr(v-bind:childArr)给子组件传递对象或数组")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('  // 子组件 Child.vue\n  <template>\n  <div>{{childText}}</div>\n  <div>\n      <span v-for="(item, index) in childArr" :key="index">{{item}}</span>\n  </div>\n  </template> \n  <script>\n  export default {\n    props: {\n      childText: String,\n      childArr: Arrary\n    }\n  }\n  <\/script>\n\n')])])]),a("p",[e._v("子组件中使用props接收传入的参数,无需再data中定义")]),e._v(" "),a("p",{staticClass:"point"},[e._v("prop 只可以从上一级组件传递到下一级组件（父子组件），即所谓的单向数据流。而且 prop 只读，不可被修改，所有修改都会失效并警告。")]),e._v(" "),a("p",[e._v("2.子组件传给父组件：$emit方法传递参数,父组件通过v-on来监听子组件触发的事件获取参数")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('  // 父组件\n  <template>\n  <div>{{message}}</div>\n  <child @childToParentMsg="childToParentMsg" />\n  </template> \n  <script>\n  import Child from "./components/Child"\n  export default {\n    data(){\n      return{ message: \'\' }\n    },\n    components:{ Child },\n    methods:{\n      childToParentMsg(msg) {\n        this.message = msg\n      }\n    }\n  }\n  <\/script>\n')])])]),a("p",[e._v("父组件通过v-on指令监听子组件通过$emit自定义的变量名称，并且自定义方法，在该方法中接收子组件传递来的数据。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  // 子组件\n  <template>\n  <button @click=\"childToParentMsg\">\n  </template> \n  <script>\n  export default {\n    methods: {\n      childToParentMsg() {\n        this.$emit('childToParentMsg, '子组件传递给父组件的数据')\n      }\n    }\n  }\n  <\/script>\n")])])]),a("p",[e._v("子组件通过$emit自定义方法，将数据传递到父页面")]),e._v(" "),a("p",[e._v("3.非父子组件间的数据传递，兄弟组件传值")]),e._v(" "),a("p",[e._v("1）借助中央事件总线，eventBus，就是创建一个事件中心，相当于中转站，可以用它来传递事件和接受事件，项目比较小时，用这个比较合适；")]),e._v(" "),a("p",[e._v("新建一个js文件，bus.js")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  import Vue from 'vue'\n  export default new Vue()\n")])])]),a("p",[e._v("然后再在个兄弟组件内引用这个js或者两个组件作为子组件被同一个父组件所引用")]),e._v(" "),a("p",[e._v("Component1.vue里监听事件")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  import eventBus from './bus'\n  created () {\n    eventBus.$on('busEvent', args => {\n      //...\n    }) \n  }\n")])])]),a("p",[e._v("Component2.vue中触发事件")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  import eventBus from './bus'\n  //...\n  watch: {\n    list(newValue, oldValue) {\n      eventBus.$emit('my-event', newValue)\n    }\n  }\n")])])]),a("p",[e._v("2）VueX，创建一个数据仓库，整个项目全局都可以往这个仓库存放数据和读取数据")]),e._v(" "),a("p",[e._v("3）利用HTML5的localStorage特性方法将数据存储到本地，不同组件间可以都可以存储和读取数据")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  //存储数据\n  localStorage.setItem('name', '张三')\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  //取出数据\n  localStorage.getItem('name')\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  //删除存储的数据\n  localStorage.removeItem('name')\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  //更改缓存数据\n  localStorage.setItem('name', '更改后的数据')\n")])])]),a("h2",{attrs:{id:"七、keep-alive的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七、keep-alive的作用"}},[e._v("#")]),e._v(" 七、keep-alive的作用")]),e._v(" "),a("p",[e._v("keep-alive是 Vue 内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染。")]),e._v(" "),a("p",[e._v("keep-alive包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。keep-alive 是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在组件的父组件链中。")]),e._v(" "),a("p",[e._v("当组件在 keep-alive 内被切换，它的 activated 和 deactivated 这两个生命周期钩子函数将会被对应执行。")]),e._v(" "),a("p",[e._v("使用方法")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  <keep-alive include='include_components' exclude='exclude_components'>\n    <component>\n      \x3c!-- 该组件是否缓存取决于include和exclude属性 --\x3e\n    </component>\n  </keep-alive>\n")])])]),a("p",[e._v("include - 字符串或正则表达式。只有名称匹配的组件会被缓存；exclude - 字符串或正则表达式。任何名称匹配的组件都不会被缓存。")]),e._v(" "),a("p",[e._v("include 和 exclude 属性允许组件有条件地缓存。二者都可以用逗号分隔字符串、正则表达式或一个数组来表示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('  \x3c!-- 逗号分隔字符串 --\x3e\n  <keep-alive include="a,b">\n    <component :is="view"></component>\n  </keep-alive>\n\n  \x3c!-- 正则表达式 (使用 `v-bind`) --\x3e\n  <keep-alive :include="/a|b/">\n    <component :is="view"></component>\n  </keep-alive>\n\n  \x3c!-- 数组 (使用 `v-bind`) --\x3e\n  <keep-alive :include="[\'a\', \'b\']">\n    <component :is="view"></component>\n  </keep-alive>\n')])])]),a("p",[e._v("max - 数字。最多可以缓存多少组件实例。一旦这个数字达到了，在新实例被创建之前，已缓存组件中最久没有被访问的实例会被销毁掉。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('  <keep-alive :max="10">\n    <component :is="view"></component>\n  </keep-alive>\n')])])]),a("p",{staticClass:"point"},[e._v("keep-alive 不会在函数式组件中正常工作，因为它们没有缓存实例。")]),e._v(" "),a("h2",{attrs:{id:"八、-nexttick的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#八、-nexttick的作用"}},[e._v("#")]),e._v(" 八、$nextTick的作用")]),e._v(" "),a("p",[e._v("vue中dom的更新并不是实时的，而是"),a("strong",[e._v("异步")]),e._v("执行的")]),e._v(" "),a("h3",{attrs:{id:"持续更新中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#持续更新中"}},[e._v("#")]),e._v(" 持续更新中...")])])}),[],!1,null,null,null);t.default=s.exports}}]);